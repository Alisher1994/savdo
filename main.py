from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.support import expected_conditions as EC
from datetime import datetime, timezone, timedelta
import telegram
import logging
import time
import gspread
from google.oauth2.service_account import Credentials
import json
import os
import asyncio

# ----- –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å –¥–∞–Ω–Ω—ã–º–∏ -----
BOT_TOKEN = os.environ.get('BOT_TOKEN', "7804555297:AAH7YFsNeJeSo5-fyVWybbAjut6VSnF96Sw")
GOOGLE_SHEETS_KEY = os.environ.get('GOOGLE_SHEETS_KEY', "1-JuXg-pAX1Ts-fNWE0P8V8ktAf6kcYa8wTkij9kEGYQ")

LOGIN_CREDENTIALS = {
    "TANDOOR_MAHALLA": {
        "email": "alishermusayev1994@gmail.com",
        "password": "Lightalisher1994"
    },
    "HON_ATLAS": {
        "email": "lolaabduyusupova@gmail.com",
        "password": "a2556263"
    }
}

RESTAURANTS = [
    {
        "name": "–¢–∞–Ω–¥–æ–æ—Ä",
        "url": "https://app.jowi.club/ru/restaurants/ef62ef82-e7a3-4909-bb8b-906257ebd17c/cashbox_report",
        "restaurant_id": "ef62ef82-e7a3-4909-bb8b-906257ebd17c",
        "login_key": "TANDOOR_MAHALLA",
        "message_thread_id": 3,
        "sheet_name": "–¢–∞–Ω–¥–æ–æ—Ä"
    },
    {
        "name": "–ú–∞—Ö–∞–ª–ª–∞ 90",
        "url": "https://app.jowi.club/ru/restaurants/b3732283-d47c-4dd0-aa63-cd4bc7e0dfe3/cashbox_report",
        "restaurant_id": "b3732283-d47c-4dd0-aa63-cd4bc7e0dfe3",
        "login_key": "TANDOOR_MAHALLA",
        "message_thread_id": 7,
        "sheet_name": "–ú–∞—Ö–∞–ª–ª–∞ 90"
    },
    {
        "name": "–•–æ–Ω –ê—Ç–ª–∞—Å",
        "url": "https://app.jowi.club/ru/restaurants/6d7d2a7a-22cd-48ed-8c43-7e944afebc4b/cashbox_report",
        "restaurant_id": "6d7d2a7a-22cd-48ed-8c43-7e944afebc4b",
        "login_key": "HON_ATLAS",
        "message_thread_id": 5,
        "sheet_name": "–•–æ–Ω –ê—Ç–ª–∞—Å"
    }
]

CHAT_ID = os.environ.get('CHAT_ID', "-1002709942333")

# ----- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ -----
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)

# ----- Selenium options -----
chrome_options = Options()
chrome_options.add_argument("--headless")
chrome_options.add_argument("--no-sandbox")
chrome_options.add_argument("--disable-dev-shm-usage")
chrome_options.add_argument("--disable-gpu")
chrome_options.add_argument("--window-size=1920,1080")
chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")

def setup_google_sheets():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
    try:
        service_account_json = os.environ.get('SERVICE_ACCOUNT_JSON')
        if not service_account_json:
            logging.error("SERVICE_ACCOUNT_JSON not found in environment variables")
            return None
            
        service_account_info = json.loads(service_account_json)
        scopes = ["https://www.googleapis.com/auth/spreadsheets"]
        
        creds = Credentials.from_service_account_info(service_account_info, scopes=scopes)
        client = gspread.authorize(creds)
        
        spreadsheet = client.open_by_key(GOOGLE_SHEETS_KEY)
        worksheet = spreadsheet.worksheet("–ü—Ä–æ–¥–∞–∂–∞")
        
        logging.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets")
        return worksheet
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {str(e)}")
        return None

def write_to_google_sheets(worksheet, date, restaurant_name, amount):
    """–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets"""
    try:
        if not amount or amount == "0":
            logging.warning(f"–ü—É—Å—Ç–∞—è —Å—É–º–º–∞ –¥–ª—è {restaurant_name}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å")
            return False
            
        # –û—á–∏—Å—Ç–∫–∞ —Å—É–º–º—ã: —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏
        clean_amount = amount.replace(" ", "").replace(",", ".")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
        try:
            float(clean_amount)
        except ValueError:
            logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞: {amount}")
            return False
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏
        row_data = [date, restaurant_name, "–°–∞–≤–¥–æ", clean_amount]
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        worksheet.append_row(row_data)
        
        logging.info(f"üìä –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google Sheets: {restaurant_name} - {clean_amount}")
        return True
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {str(e)}")
        return False

def format_amount(amount):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á"""
    if not amount or amount == "0":
        return "0,00"
    
    # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    amount = amount.replace(" ", "").replace(".", "").replace(",", "")
    
    try:
        num = float(amount)
        formatted = "{:,.2f}".format(num).replace(",", "X").replace(".", ",").replace("X", " ")
        return formatted.rstrip()
    except ValueError:
        return amount

def login(driver, login_key):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        driver.get("https://app.jowi.club/ru/users/sign_in")
        WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.ID, "user_email")))
        
        credentials = LOGIN_CREDENTIALS[login_key]
        driver.find_element(By.ID, "user_email").send_keys(credentials["email"])
        driver.find_element(By.ID, "user_password").send_keys(credentials["password"])
        driver.find_element(By.CSS_SELECTOR, ".form_submit button").click()
        
        WebDriverWait(driver, 20).until(EC.url_contains("/ru"))
        time.sleep(3)
        return True
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
        return False

def get_cashbox_data(restaurant):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö"""
    from webdriver_manager.chrome import ChromeDriverManager
    from selenium.webdriver.chrome.service import Service
    
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)
    
    try:
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not login(driver, restaurant["login_key"]):
            return None, "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
        for attempt in range(3):
            try:
                restaurant_link = WebDriverWait(driver, 20).until(
                    EC.visibility_of_element_located((By.XPATH, f"//a[@href='/ru/restaurants/{restaurant['restaurant_id']}']"))
                )
                driver.execute_script("arguments[0].scrollIntoView(true);", restaurant_link)
                time.sleep(1)
                driver.execute_script("arguments[0].click();", restaurant_link)
                time.sleep(2)
                break
            except Exception as e:
                if attempt == 2:
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É {restaurant['name']}")
                time.sleep(3)
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Ç—á–µ—Ç—É –∫–∞—Å—Å—ã
        driver.get(restaurant["url"])
        WebDriverWait(driver, 20).until(EC.presence_of_element_located((By.ID, "standatr_date")))
        
        # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ "–í—á–µ—Ä–∞"
        select_element = WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.ID, "standatr_date")))
        select = Select(select_element)
        select.select_by_value("2")
        time.sleep(2)
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        initial_income = driver.find_element(By.CSS_SELECTOR, ".large_cash b").text.strip()
        start_time = time.time()
        
        while time.time() - start_time < 30:
            current_income = driver.find_element(By.CSS_SELECTOR, ".large_cash b").text.strip()
            if current_income != initial_income and current_income != "0" and current_income != "":
                break
            time.sleep(2)
        else:
            return None, "–°—É–º–º–∞ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ '–í—á–µ—Ä–∞'"
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã
        income = driver.find_element(By.CSS_SELECTOR, ".large_cash b").text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        try:
            last_updated = driver.find_element(By.CSS_SELECTOR, ".widget_last_updated i").text.replace("–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤: ", "").strip()
            last_updated_time = datetime.strptime(last_updated, "%H:%M").replace(
                year=datetime.now(timezone(timedelta(hours=5))).year,
                month=datetime.now(timezone(timedelta(hours=5))).month,
                day=datetime.now(timezone(timedelta(hours=5))).day
            )
            
            if last_updated_time.date() < datetime.now(timezone(timedelta(hours=5))).date():
                return None, "–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏"
                
        except Exception as time_error:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {time_error}")
        
        return income, None
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {restaurant['name']}: {str(e)}")
        return None, str(e)
        
    finally:
        driver.quit()

async def send_to_telegram():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        bot = telegram.Bot(token=BOT_TOKEN)
        tz = timezone(timedelta(hours=5))
        yesterday = (datetime.now(tz) - timedelta(days=1)).strftime("%d.%m.%Y")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
        worksheet = setup_google_sheets()
        if not worksheet:
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Google Sheets, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∑–∞–ø–∏—Å–∏")
        
        results = []
        
        for restaurant in RESTAURANTS:
            logging.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞: {restaurant['name']}")
            
            income, error = get_cashbox_data(restaurant)
            message_thread_id = restaurant["message_thread_id"]
            
            if error:
                formatted_income = "0,00"
                message = f"‚ùå –û—à–∏–±–∫–∞: {restaurant['name']}\n\n–ü—Ä–∏—á–∏–Ω–∞: {error}"
                logging.error(f"–û—à–∏–±–∫–∞ –¥–ª—è {restaurant['name']}: {error}")
            else:
                formatted_income = format_amount(income)
                message = f"‚úÖ –°–∞–≤–¥–æ: {yesterday}\n{restaurant['name']}\n\n–°—É–º–º–∞: {formatted_income}"
                logging.info(f"–£—Å–ø–µ—à–Ω–æ: {restaurant['name']} - {formatted_income}")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
            try:
                await bot.send_message(
                    chat_id=CHAT_ID,
                    text=message,
                    message_thread_id=message_thread_id,
                    parse_mode='HTML'
                )
                logging.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram –¥–ª—è {restaurant['name']}")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –¥–ª—è {restaurant['name']}: {str(e)}")
            
            # –ó–∞–ø–∏—Å—å –≤ Google Sheets
            if income and worksheet and not error:
                success = write_to_google_sheets(
                    worksheet, 
                    yesterday, 
                    restaurant["sheet_name"], 
                    income
                )
                if success:
                    results.append(f"‚úÖ {restaurant['name']}: {formatted_income}")
                else:
                    results.append(f"‚ùå {restaurant['name']}: –æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏")
            else:
                results.append(f"‚ö†Ô∏è {restaurant['name']}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(2)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        logging.info("=" * 50)
        logging.info("–ò–¢–û–ì –í–´–ü–û–õ–ù–ï–ù–ò–Ø:")
        for result in results:
            logging.info(result)
        logging.info("=" * 50)
        
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {str(e)}")

if __name__ == "__main__":
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    asyncio.run(send_to_telegram())
    logging.info("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
